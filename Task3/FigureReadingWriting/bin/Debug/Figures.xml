<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Figures</name>
    </assembly>
    <members>
        <member name="T:Figures.Circle">
            <summary>
            The class representing a circle
            </summary>
        </member>
        <member name="M:Figures.Circle.#ctor(System.Double[])">
            <summary>
            Creates an instance of the Circle class
            </summary>
            <param name="sides">Sides of figure</param>
        </member>
        <member name="M:Figures.Circle.GetArea">
            <summary>
            Gets area of a figure
            </summary>
            <returns>The area of a figure</returns>
        </member>
        <member name="M:Figures.Circle.GetPerimeter">
            <summary>
            Gets perimeter of a figure
            </summary>
            <returns>The perimeter of a figure</returns>
        </member>
        <member name="T:Figures.DoubleArrayExtension">
            <summary>
            Provides an extension method for converting the double array class to a string
            </summary>
        </member>
        <member name="M:Figures.DoubleArrayExtension.DoubleArrayToString(System.Double[])">
            <summary>
            Converts double array to string
            </summary>
            <param name="numbers"></param>
            <returns>String representatin of double array</returns>
        </member>
        <member name="T:Figures.Figure">
            <summary>
            The abstract class representing a figure
            </summary>
        </member>
        <member name="M:Figures.Figure.#ctor(System.String,System.Double[])">
            <summary>
            Class constructor
            </summary>
            <param name="name">Name of figure</param>
            <param name="sides">Sides of figure</param>
        </member>
        <member name="P:Figures.Figure.Name">
            <summary>
            Name of figure
            </summary>
        </member>
        <member name="F:Figures.Figure.sides">
            <summary>
            Protected field of figure sides
            </summary>
        </member>
        <member name="P:Figures.Figure.Sides">
            <summary>
            Figure sides
            </summary>
        </member>
        <member name="P:Figures.Figure.Area">
            <summary>
            Area of a figure
            </summary>
        </member>
        <member name="P:Figures.Figure.Perimeter">
            <summary>
            Perimeter of a figure
            </summary>
        </member>
        <member name="F:Figures.Figure.color">
            <summary>
            Protected field of figure color
            </summary>
        </member>
        <member name="P:Figures.Figure.Color">
            <summary>
            Figure color
            </summary>
        </member>
        <member name="M:Figures.Figure.GetArea">
            <summary>
            Gets area of a figure
            </summary>
            <returns>Area of a figure</returns>
        </member>
        <member name="M:Figures.Figure.GetPerimeter">
            <summary>
            Gets perimeter of a figure
            </summary>
            <returns>Perimeter of a figure</returns>
        </member>
        <member name="T:Figures.FigureCreator">
            <summary>
            Provides method for creating a figure
            </summary>
        </member>
        <member name="M:Figures.FigureCreator.CreateFigure(Figures.FigureTypes,System.Double[],Figures.MaterialTypes)">
            <summary>
            Creates a figure
            </summary>
            <param name="shape">Type of a figure</param>
            <param name="sides">Sides of a figure</param>
            <param name="material">Material of a figure</param>
            <returns>Figure</returns>
        </member>
        <member name="M:Figures.FigureCreator.MakeEmptyFigure(Figures.FigureTypes,System.Double[])">
            <summary>
            Creates empty figure
            </summary>
            <param name="shape">Type of a figure</param>
            <param name="sides">Sides of a figure</param>
            <returns>Empty figure</returns>
        </member>
        <member name="M:Figures.FigureCreator.MakeFigureWithMaterial(Figures.Figure,Figures.MaterialTypes)">
            <summary>
            Creates a figure with a material
            </summary>
            <param name="figure">Name of a figure</param>
            <param name="material">Material of a figure</param>
            <returns>Figure with a material</returns>
        </member>
        <member name="T:Figures.FigureDecorator">
            <summary>
            The abstract class representing a figure wiht material
            </summary>
        </member>
        <member name="F:Figures.FigureDecorator.figure">
            <summary>
            Initial figure
            </summary>
        </member>
        <member name="F:Figures.FigureDecorator.CutOfFigure">
            <summary>
            Cut of the figure
            </summary>
        </member>
        <member name="M:Figures.FigureDecorator.#ctor(System.String,System.Double[],Figures.Figure)">
            <summary>
            Class constructor
            </summary>
            <param name="name">Name of a figure</param>
            <param name="sides">Sides of a figure</param>
            <param name="figure">Initial figure</param>
        </member>
        <member name="M:Figures.FigureDecorator.#ctor(Figures.FigureDecorator,Figures.Figure,System.String,System.Double[])">
            <summary>
            Class constructor that cuts a figure from another figure
            </summary>
            <param name="originalFigure">Original figure</param>
            <param name="newFigure">New initial figure</param>
            <param name="name">Name of a figure</param>
            <param name="sides">Sides of figure</param>
        </member>
        <member name="M:Figures.FigureDecorator.GetArea">
            <summary>
            Gets the area of a figure
            </summary>
            <returns>The area of a figure</returns>
        </member>
        <member name="M:Figures.FigureDecorator.GetPerimeter">
            <summary>
            Gets the perimeter of a figure
            </summary>
            <returns>The perimeter of a figure</returns>
        </member>
        <member name="M:Figures.FigureDecorator.ToString">
            <summary>
            Converts instance of class to string
            </summary>
            <returns>String representation of instance of class</returns>
        </member>
        <member name="T:Figures.FigureTypes">
            <summary>
            Figure types
            </summary>
        </member>
        <member name="F:Figures.FigureTypes.Circle">
            <summary>
            Type of figure
            </summary>
        </member>
        <member name="F:Figures.FigureTypes.Triangle">
            <summary>
            Type of figure
            </summary>
        </member>
        <member name="F:Figures.FigureTypes.Square">
            <summary>
            Type of figure
            </summary>
        </member>
        <member name="F:Figures.FigureTypes.Rectangle">
            <summary>
            Type of figure
            </summary>
        </member>
        <member name="T:Figures.MaterialTypes">
            <summary>
            Material types
            </summary>
        </member>
        <member name="F:Figures.MaterialTypes.Paper">
            <summary>
            Type of material
            </summary>
        </member>
        <member name="F:Figures.MaterialTypes.Plastic">
            <summary>
            Type of material
            </summary>
        </member>
        <member name="F:Figures.MaterialTypes.Film">
            <summary>
            Type of material
            </summary>
        </member>
        <member name="T:Figures.Colors">
            <summary>
            Colors
            </summary>
        </member>
        <member name="F:Figures.Colors.None">
            <summary>
            Lack of color
            </summary>
        </member>
        <member name="F:Figures.Colors.Red">
            <summary>
            Red color
            </summary>
        </member>
        <member name="F:Figures.Colors.Green">
            <summary>
            Green color
            </summary>
        </member>
        <member name="F:Figures.Colors.Blue">
            <summary>
            Blue color
            </summary>
        </member>
        <member name="F:Figures.Colors.Yellow">
            <summary>
            Yellow color
            </summary>
        </member>
        <member name="F:Figures.Colors.White">
            <summary>
            White color
            </summary>
        </member>
        <member name="F:Figures.Colors.Orange">
            <summary>
            Orange color
            </summary>
        </member>
        <member name="F:Figures.Colors.Black">
            <summary>
            Black color
            </summary>
        </member>
        <member name="T:Figures.FilmFigure">
            <summary>
            The class representing a film figure
            </summary>
        </member>
        <member name="M:Figures.FilmFigure.#ctor(Figures.Figure)">
            <summary>
            Creates an instance of the FilmFigure class
            </summary>
            <param name="figure">Initial figure</param>
        </member>
        <member name="M:Figures.FilmFigure.#ctor(Figures.FigureDecorator,Figures.Figure)">
            <summary>
            Class constructor that cuts a figure from another figure
            </summary>
            <param name="originalFigure">Original figure</param>
            <param name="newFigure">New initial figure</param>
        </member>
        <member name="P:Figures.FilmFigure.Color">
            <summary>
            Color of a figure
            </summary>
        </member>
        <member name="M:Figures.FilmFigure.ToString">
            <summary>
            Converts instance of class to string
            </summary>
            <returns>String representation of instance of class</returns>
        </member>
        <member name="M:Figures.FilmFigure.Equals(System.Object)">
            <summary>
            Redefining the Equals method
            </summary>
            <param name="obj"></param>
            <returns>True if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="M:Figures.FilmFigure.GetHashCode">
            <summary>
            Calculates the hash code of the current object
            </summary>
            <returns>Hash code of the current object</returns>
        </member>
        <member name="T:Figures.PaperFigure">
            <summary>
            The class representing a paper figure
            </summary>
        </member>
        <member name="M:Figures.PaperFigure.#ctor(Figures.Figure)">
            <summary>
            Creates an instance of the PaperFigure class
            </summary>
            <param name="figure">Initial figure</param>
        </member>
        <member name="M:Figures.PaperFigure.#ctor(Figures.FigureDecorator,Figures.Figure)">
            <summary>
            Class constructor that cuts a figure from another figure
            </summary>
            <param name="originalFigure">Original figure</param>
            <param name="newFigure">New initial figure</param>
        </member>
        <member name="F:Figures.PaperFigure.isChangedColor">
            <summary>
            Protected field of whether the color is changed 
            </summary>
        </member>
        <member name="P:Figures.PaperFigure.IsChangedColor">
            <summary>
            Whether the color was changed
            </summary>
        </member>
        <member name="P:Figures.PaperFigure.Color">
            <summary>
            Color of a figure
            </summary>
        </member>
        <member name="M:Figures.PaperFigure.ToString">
            <summary>
            Converts instance of class to string
            </summary>
            <returns>String representation of instance of class</returns>
        </member>
        <member name="M:Figures.PaperFigure.Equals(System.Object)">
            <summary>
            Redefining the Equals method
            </summary>
            <param name="obj"></param>
            <returns>True if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="M:Figures.PaperFigure.GetHashCode">
            <summary>
            Calculates the hash code of the current object
            </summary>
            <returns>Hash code of the current object</returns>
        </member>
        <member name="T:Figures.PlasticFigure">
            <summary>
            The class representing a paper figure
            </summary>
        </member>
        <member name="M:Figures.PlasticFigure.#ctor(Figures.Figure)">
            <summary>
            Creates an instance of the PlasticFigure class
            </summary>
            <param name="figure">Initial figure</param>
        </member>
        <member name="M:Figures.PlasticFigure.#ctor(Figures.FigureDecorator,Figures.Figure)">
            <summary>
            Class constructor that cuts a figure from another figure
            </summary>
            <param name="originalFigure">Original figure</param>
            <param name="newFigure">New initial figure</param>
        </member>
        <member name="F:Figures.PlasticFigure.isChangedColor">
            <summary>
            Protected field of whether the color is changed 
            </summary>
        </member>
        <member name="P:Figures.PlasticFigure.IsChangedColor">
            <summary>
            Whether the color was changed
            </summary>
        </member>
        <member name="P:Figures.PlasticFigure.Color">
            <summary>
            Color of a figure
            </summary>
        </member>
        <member name="M:Figures.PlasticFigure.ToString">
            <summary>
            Converts instance of class to string
            </summary>
            <returns>String representation of instance of class</returns>
        </member>
        <member name="M:Figures.PlasticFigure.Equals(System.Object)">
            <summary>
            Redefining the Equals method
            </summary>
            <param name="obj"></param>
            <returns>True if the specified object is equal to the current object; otherwise, false</returns>
        </member>
        <member name="M:Figures.PlasticFigure.GetHashCode">
            <summary>
            Calculates the hash code of the current object
            </summary>
            <returns>Hash code of the current object</returns>
        </member>
        <member name="T:Figures.Rectangle">
            <summary>
            The class representing a rectangle
            </summary>
        </member>
        <member name="M:Figures.Rectangle.#ctor(System.Double[])">
            <summary>
            Creates an instance of the Rectangle class
            </summary>
            <param name="sides">Sides of figure</param>
        </member>
        <member name="M:Figures.Rectangle.GetArea">
            <summary>
            Gets area of a figure
            </summary>
            <returns>The area of a figure</returns>
        </member>
        <member name="M:Figures.Rectangle.GetPerimeter">
            <summary>
            Gets perimeter of a figure
            </summary>
            <returns>The perimeter of a figure</returns>
        </member>
        <member name="T:Figures.Square">
            <summary>
            The class representing a square
            </summary>
        </member>
        <member name="M:Figures.Square.#ctor(System.Double[])">
            <summary>
            Creates an instance of the Square class
            </summary>
            <param name="sides">Sides of figure</param>
        </member>
        <member name="M:Figures.Square.GetArea">
            <summary>
            Gets area of a figure
            </summary>
            <returns>The area of a figure</returns>
        </member>
        <member name="M:Figures.Square.GetPerimeter">
            <summary>
            Gets perimeter of a figure
            </summary>
            <returns>The perimeter of a figure</returns>
        </member>
        <member name="T:Figures.Triangle">
            <summary>
            The class representing a triangle
            </summary>
        </member>
        <member name="M:Figures.Triangle.#ctor(System.Double[])">
            <summary>
            Creates an instance of the Triangle class
            </summary>
            <param name="sides">Sides of figure</param>
        </member>
        <member name="M:Figures.Triangle.GetArea">
            <summary>
            Gets area of a figure
            </summary>
            <returns>The area of a figure</returns>
        </member>
        <member name="M:Figures.Triangle.GetPerimeter">
            <summary>
            Gets perimeter of a figure
            </summary>
            <returns>The perimeter of a figure</returns>
        </member>
    </members>
</doc>
